package com.olav.logolicious.util;

import android.app.Application;
import android.content.Context;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Environment;
import android.support.v4.util.LruCache;
import android.util.Log;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.olav.logolicious.R;
import com.olav.logolicious.customize.datamodel.ImageExif;
import com.olav.logolicious.util.cacher.DiskLruImageCache;

import org.acra.ACRA;
import org.acra.ReportField;
import org.acra.ReportingInteractionMode;
import org.acra.annotation.ReportsCrashes;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

@ReportsCrashes(formKey = "", // will not be used
		customReportContent = {
                ReportField.USER_COMMENT,
                ReportField.ANDROID_VERSION,
                ReportField.APP_VERSION_NAME,
                ReportField.BRAND,
                ReportField.PHONE_MODEL,
                ReportField.TOTAL_MEM_SIZE,
                ReportField.AVAILABLE_MEM_SIZE,
                ReportField.CUSTOM_DATA,
                ReportField.DISPLAY,
                ReportField.STACK_TRACE
        },
		mailTo = "helpdesk@thelaughingdutchmen.com", // support email here
		mode = ReportingInteractionMode.TOAST,
		resToastText = R.string.crash_toast_text)
public class GlobalClass extends Application {

	public static SQLiteHelper sqLiteHelper;
	public static Bitmap baseBitmap;
    public static ImageExif baseImageExif = new ImageExif();
	public static int origBitmapheight;
	public static int origBitmapwidth;
	public static  int screenCropperWidth;
	public static  int screenCropperHeigth;
	public static int APP_MODE = 0;
	public static int MODE_PRO = 1;
	public static int MODE_PUBLISH = 2;
	public static ImageLoader imageLoader = ImageLoader.getInstance(); // Get
																		// singleton
																		// instance

	public static final String App_Files_location = ".Logolicious";
	public static String picturePath; //this is changing path 
	public static String logoPath;
	public static String log_path = null;

	public static DiskLruImageCache diskCache;
	public static LruCache<String, Bitmap> mMemoryCache;

	public static SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd_HHmmss");
	//public static boolean ARFirst = true;
	public static String AR = "";
	public static String ARLast = "";
	public static boolean isFreeChoosenAR = false;
	public static boolean subscriptionOkToShow = false;

	// new code
	static {
		System.loadLibrary("native-lib");
	}

	/**
	 * A native method that is implemented by the 'native-lib' native library,
	 * which is packaged with this application.
	 */
	public static native String  stringFromJNI();
	public static native void dlmalloc();
	public static native void malloc(int bytes);
	public static native void freeMem();
	public static native void freeMemSize(int bytes);

	@Override
	public void onCreate() {
		// The following line triggers the initialization of ACRA
		ACRA.init(this);
		APP_MODE = MODE_PUBLISH;
		super.onCreate();
		//malloc(100 * 1024 * 1024);
		File root = Environment.getExternalStorageDirectory();
		String fs = File.separator;
		log_path = root + fs + App_Files_location + fs + "LogoLiciousLog.txt";
		if(null != log_path) {
			FileUtil.deleteDirectoryFiles(new File(log_path));
			FileUtil.fileWrite(log_path, "Starting Logolicious", true);
		}
		// initialize only if the activity call is not from the cropper.
		initDiskCache(this);
		initMemCache(this);
		sqLiteHelper = new SQLiteHelper(this);
		// Create global configuration and initialize ImageLoader with this config
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this).build();
		ImageLoader.getInstance().init(config);
	}
	
	public static void initDiskCache(Context ctx){
//		FileUtil.fileWrite(log_path, "GlobalClass.java Initializing Cacher", true);	
		String currentDateandTime = df.format(new Date());
		diskCache = new DiskLruImageCache(ctx, "LogoliciousCache_" + currentDateandTime);
	}

	public static void initMemCache(Context ctx){
		// Get max available VM memory, exceeding this amount will throw an
		// OutOfMemory exception. Stored in kilobytes as LruCache takes an
		// int in its constructor.
		final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
//	    FileUtil.fileWrite(log_path, "->>maxMemory " + maxMemory, true);

		// Use 1/8th of the available memory for this memory cache.
		final int cacheSize = maxMemory / 8;

		mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {
			@Override
			protected int sizeOf(String key, Bitmap bitmap) {
				// The cache size will be measured in kilobytes rather than
				// number of items.
				int byteCount  = 0;
				if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
					byteCount = bitmap.getByteCount();
				} else {
					byteCount = bitmap.getRowBytes() * bitmap.getHeight();
				}
				return byteCount / 1024;
			}
		};
	}

    public static String getAR() {

		if(null == GlobalClass.baseBitmap)
			return "";

        int x = GlobalClass.baseBitmap.getWidth();
        int y = GlobalClass.baseBitmap.getHeight();

        if (LogoliciousApp.strIsNullOrEmpty(AR)) {
            String finalAR;

            if (x > 0 && y > 0) {
                finalAR = "_1:";
                if (x > y) {
                    double a = (double) x / (double) y;
                    String[] arr1 = String.valueOf(String.format(Locale.US, "%.1f", a)).split("\\.");
                    if (String.valueOf(a).contains(".") && arr1.length > 1) {
                        finalAR = finalAR + arr1[0] + "." + arr1[1];
                    } else
                        finalAR = finalAR + arr1[0];
                } else {
                    double a = (double) y / (double) x;
                    String[] arr1 = String.valueOf(String.format(Locale.US, "%.1f", a)).split("\\.");
                    if (String.valueOf(a).contains(".") && arr1.length > 1) {
                        finalAR = finalAR + arr1[0] + "." + arr1[1];
                    } else
                        finalAR = finalAR + arr1[0];
                    Log.i("xxx", "xxx y>x " + a);
                }
                return finalAR;
            }
            return "";
        } else {
            Map<String, Integer> ars = new HashMap<>();
            ars.put("1:1", 1);
            ars.put("3:4", 2);
            ars.put("4:3", 3);
            ars.put("9:16", 4);
            ars.put("16:9", 5);
            if (ars.containsKey(AR)) {
                return "_" + AR;
            }
        }
        return "";
    }

}